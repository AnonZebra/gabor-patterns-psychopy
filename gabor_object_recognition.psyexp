<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2022.1.4">
  <Settings>
    <Param val="use prefs" valType="str" updates="None" name="Audio latency priority"/>
    <Param val="use prefs" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="auto" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None" name="Data filename"/>
    <Param val="True" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="{'participant': ''}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="True" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="html" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="packaged" valType="str" updates="None" name="JS libs"/>
    <Param val="testMonitor" valType="str" updates="None" name="Monitor"/>
    <Param val="[]" valType="fileList" updates="None" name="Resources"/>
    <Param val="False" valType="bool" updates="None" name="Save csv file"/>
    <Param val="False" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="True" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="True" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="1" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="False" valType="bool" updates="None" name="Show mouse"/>
    <Param val="deg" valType="str" updates="None" name="Units"/>
    <Param val="" valType="str" updates="None" name="Use version"/>
    <Param val="[1280, 800]" valType="code" updates="None" name="Window size (pixels)"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="$[0, 0, 0]" valType="str" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="gabor_object_recognition" valType="str" updates="None" name="expName"/>
    <Param val="on Sync" valType="str" updates="None" name="exportHTML"/>
    <Param val="None" valType="str" updates="None" name="eyetracker"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="PsychToolbox" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="debug" valType="code" updates="None" name="logging level"/>
    <Param val="('MIDDLE_BUTTON',)" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="True" valType="bool" updates="None" name="plPupilCaptureRecordingEnabled"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
  </Settings>
  <Routines>
    <Routine name="trial_gabor">
      <CodeComponent name="code_trial">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="&quot;&quot;&quot;&amp;#10;Sets up lists of paths to image files for experiment stimuli and initializes&amp;#10;some variables/values that will be used throughout the experiment.&amp;#10;&quot;&quot;&quot;&amp;#10;&amp;#10;import re&amp;#10;from random import sample, choices&amp;#10;&amp;#10;def get_list_of_files(dir_name):&amp;#10;    &quot;&quot;&quot;&amp;#10;    For the given path, gets a list of all files in the directory tree&amp;#10;    &quot;&quot;&quot;&amp;#10;    # create a list of file and sub directory&amp;#10;    # names in the given directory&amp;#10;    # (excluding hidden files, ie those starting with a dot)&amp;#10;    list_of_files = [x for x in os.listdir(dir_name) if not x.startswith('.')]&amp;#10;    all_files = list()&amp;#10;    # Iterate over all the entries&amp;#10;    for entry in list_of_files:&amp;#10;        # Create full path&amp;#10;        full_path = os.path.join(dir_name, entry)&amp;#10;        # If entry is a directory then get the list of files in this directory&amp;#10;        if os.path.isdir(full_path):&amp;#10;            all_files = all_files + get_list_of_files(full_path)&amp;#10;        else:&amp;#10;            all_files.append(full_path)&amp;#10;    return all_files&amp;#10;&amp;#10;def find_roots(target_dir, root_category):&amp;#10;    &quot;&quot;&quot;&amp;#10;    finds roots of sets of files that hold stimulus sequence images, like&amp;#10;    'RFP_OPP_1' for the sequence 'RFP_OPP_1_1.bmp' through 'RFP_OPP_1_12.bmp'&amp;#10;    &quot;&quot;&quot;&amp;#10;    roots = []&amp;#10;    for file_path in get_list_of_files(target_dir):&amp;#10;        if re.findall('bmp', file_path):&amp;#10;            new_root = (root_category, re.match(r'([A-Za-z].+_)[0-9]+\.bmp', file_path).group(1))&amp;#10;            roots.append(new_root)&amp;#10;    # ensure there are no duplicates&amp;#10;    roots = list(set(roots))&amp;#10;    return roots&amp;#10;&amp;#10;# directory where all the stimuli images (or subdirectories containing the stimuli imgs)&amp;#10;# are stored&amp;#10;STIM_DIR = 'stimuli'&amp;#10;# name of subdirectory with 'grey' (blank) stimulus images&amp;#10;GREY_DIR = 'grey'&amp;#10;GREY_DIR = os.path.join(STIM_DIR, GREY_DIR)&amp;#10;# name of subdirectory with other (non-blank) stimuli images&amp;#10;# (assuming here a hierarchical directory structure where all non-grey stimuli&amp;#10;# images are stored in subdirectories of the 'non-blank' directory)&amp;#10;NONBLANK_DIR = 'Gabor stimuli Sapey Boets'&amp;#10;# name of sub-subdirectory with Random pattern stimuli images&amp;#10;RANDOM_DIR = 'RFP_RRR'&amp;#10;RANDOM_DIR = os.path.join(STIM_DIR, NONBLANK_DIR, RANDOM_DIR)&amp;#10;# name of sub-subdirectory with Contour stimuli images&amp;#10;CONTOUR_DIR = 'RFP_RCR'&amp;#10;CONTOUR_DIR = os.path.join(STIM_DIR, NONBLANK_DIR, CONTOUR_DIR)&amp;#10;# name of sub-subdirectory with Texture stimuli images&amp;#10;TEXTURE_DIR = 'RFP_OPP'&amp;#10;TEXTURE_DIR = os.path.join(STIM_DIR, NONBLANK_DIR, TEXTURE_DIR)&amp;#10;# name of sub-subdirectory with Contour &amp; Texture stimuli images&amp;#10;CONTOUR_TEXTURE_DIR = 'RFP_RCP'&amp;#10;CONTOUR_TEXTURE_DIR = os.path.join(STIM_DIR, NONBLANK_DIR, CONTOUR_TEXTURE_DIR)&amp;#10;# name of sub-subdirectory with Contour # Texture Meaningful stimuli images&amp;#10;CONTOUR_TEXTURE_MEANINGFUL_DIR = 'Snod_RCP'&amp;#10;CONTOUR_TEXTURE_MEANINGFUL_DIR = os.path.join(&amp;#10;    STIM_DIR,&amp;#10;    NONBLANK_DIR,&amp;#10;    CONTOUR_TEXTURE_MEANINGFUL_DIR&amp;#10;)&amp;#10;&amp;#10;# forming below lists of tuples, where each tuple has as its first &amp;#10;# element the type of stimuli, and second element the filepath &amp;#10;# to a stim image file (.bmp)&amp;#10;&amp;#10;# get filepath root of each image set in the 'grey'/blank category&amp;#10;grey_filepath_roots = find_roots(GREY_DIR, 'grey')&amp;#10;&amp;#10;# from Sapey-Triomphe, Boets et al article:&amp;#10;# &quot;Participants performed two event-related fMRI runs. Each &amp;#10;# fMRI run consisted of 67 trials: 10 presentations of each of &amp;#10;# the five conditions (Random, Contour, Texture, Contour &amp; &amp;#10;# Texture Meaningless, Contour &amp; Texture Meaningful) and &amp;#10;# 17 fixation trials (baseline). &quot;&amp;#10;# in this PsychoPy experiment, there are no two separate &quot;runs&quot; as &amp;#10;# seen from the participant's perspective, since there is no pause &amp;#10;# inbetween. stimuli are still split into two &quot;runs&quot; of 40 non-fixation &amp;#10;# trials each however, to make the distribution of trials&amp;#10;# unpredictable but a bit more evenly spread out. to keep the ratio the &amp;#10;# same. to keep the proportion of fixation/non-fixation trials the same, &amp;#10;# here 17 * 40/50 = 13.6 ~= 14 fixation trials/&quot;run&quot; are used.&amp;#10;# form 14 copies of the 'grey' root, to ensure 14 fixation/baseline &amp;#10;# trials per run. &amp;#10;grey_filepath_roots = grey_filepath_roots * 14&amp;#10;&amp;#10;# get filepath root of each image set in the nonblank categories&amp;#10;# (ensuring that there are 20 sets/trials for each category)&amp;#10;random_filepath_roots = find_roots(RANDOM_DIR, 'random')&amp;#10;random_filepath_roots = choices(random_filepath_roots, k=20)&amp;#10;contour_filepath_roots = find_roots(CONTOUR_DIR, 'contour')&amp;#10;contour_filepath_roots = sample(contour_filepath_roots, 20)&amp;#10;contour_texture_filepath_roots = find_roots(&amp;#10;    CONTOUR_TEXTURE_DIR,&amp;#10;    'contour_texture'&amp;#10;)&amp;#10;contour_texture_filepath_roots = sample(contour_texture_filepath_roots, 20)&amp;#10;contour_texture_meaningful_filepath_roots = find_roots(&amp;#10;    CONTOUR_TEXTURE_MEANINGFUL_DIR,&amp;#10;    'contour_texture_meaningful'&amp;#10;)&amp;#10;contour_texture_meaningful_filepath_roots = sample(contour_texture_meaningful_filepath_roots, 20)&amp;#10;&amp;#10;# combine filepath roots in halves, first forming two separate&amp;#10;# &quot;runs&quot; (see comment above), and shuffle trials within-&quot;runs&quot;&amp;#10;run1 = (&amp;#10; grey_filepath_roots +&amp;#10; random_filepath_roots[:10] +&amp;#10; contour_filepath_roots[:10] +&amp;#10; contour_texture_filepath_roots[:10] +&amp;#10; contour_texture_meaningful_filepath_roots[:10]&amp;#10;)&amp;#10;&amp;#10;run2 = (&amp;#10; grey_filepath_roots +&amp;#10; random_filepath_roots[10:] +&amp;#10; contour_filepath_roots[10:] +&amp;#10; contour_texture_filepath_roots[10:] +&amp;#10; contour_texture_meaningful_filepath_roots[10:]&amp;#10;)&amp;#10;shuffle(run1)&amp;#10;shuffle(run2)&amp;#10;&amp;#10;# combine the two runs&amp;#10;all_filepath_roots = run1 + run2&amp;#10;&amp;#10;# Sapey/Boets:&quot;The Gabor patterns dynamically evolved from a random&amp;#10;# orientation to a final orientation, within 5400 ms&amp;#10;# (following 12 logarithmic steps, including eleven 355 ms&amp;#10;# frames and one 1495 ms end frame).&quot;&amp;#10;# specify end time of each image except the last one in the sets&amp;#10;# (last image is shown for a longer time than the others)&amp;#10;img_duration_ls=[SHORT_DUR*mult for mult in range(1, 12)]+[999999]&amp;#10;&amp;#10;# initialize image object&amp;#10;image_stimulus = visual.ImageStim(&amp;#10;    win=win, units='deg',&amp;#10;    name='image_stimulus',&amp;#10;    image=all_filepath_roots[0][1] + &quot;1.bmp&quot;, mask=None,&amp;#10;    ori=0, pos=(0, 0), size=(IMAGE_SIZE, IMAGE_SIZE),&amp;#10;    color=[1,1,1], colorSpace='rgb', opacity=1,&amp;#10;    flipHoriz=False, flipVert=False,&amp;#10;    texRes=128, interpolate=True, depth=-1.0)&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="set_img_counter = 1;&amp;#10;trial_root = all_filepath_roots.pop();&amp;#10;image_stimulus.image = ((trial_root[1] + set_img_counter.toString()) + &quot;.bmp&quot;);&amp;#10;polygon_trial_clicked.color = [0, 0, 0];&amp;#10;click_indicator_visible = false;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# initialize counter for stepping through each set's images &amp;#10;# the filenames go from &quot;foobar_1.bmp&quot; up to &quot;foobar_12.bmp&quot;&amp;#10;set_img_counter = 1&amp;#10;&amp;#10;# fetch the filepath root for the set of images to use during&amp;#10;# this trial, by popping it off the list of filepath roots&amp;#10;trial_root = all_filepath_roots.pop()&amp;#10;&amp;#10;# set first image to be drawn at beginning of routine&amp;#10;image_stimulus.image = trial_root[1] + str(set_img_counter) + &quot;.bmp&quot;&amp;#10;&amp;#10;# make the polygons indicating clicks entirely transparent&amp;#10;polygon_trial_clicked_left.opacity = 0&amp;#10;polygon_trial_clicked_right.opacity = 0&amp;#10;click_indicators_visible = False&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="# DISABLED - specifying time of 5.4s in routine components instead,&amp;#10;# for the sake of non-slip timing&amp;#10;# check if time for when last image should stop has passed&amp;#10;#if tThisFlip &gt; SHORT_DUR*11+LONG_DUR:&amp;#10;#    continueRoutine = False&amp;#10;       &amp;#10;# check if the time for when previous image should stop has passed&amp;#10;if tThisFlip &gt; img_duration_ls[set_img_counter - 1]:&amp;#10;    image_stimulus.image = trial_root[1] + str(set_img_counter) + &quot;.bmp&quot;&amp;#10;    set_img_counter += 1&amp;#10;image_stimulus.draw()&amp;#10;&amp;#10;if not click_indicators_visible and key_resp_trial.keys and trial_root[0] !='grey':&amp;#10;    polygon_trial_clicked_left.opacity = 1&amp;#10;    polygon_trial_clicked_right.opacity = 1&amp;#10;    click_indicators_visible = True" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="trials_gabor.addData('stimulus_type', trial_root[0])&amp;#10;trials_gabor.addData('stimulus_path', trial_root[1])" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_trial" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <KeyboardComponent name="key_resp_trial">
        <Param val="LEFTKEY_TUPLE" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_trial" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="5.4" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <PolygonComponent name="polygon_trial_clicked_right">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="fillColor"/>
        <Param val="rgb" valType="str" updates="constant" name="fillColorSpace"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="lineColor"/>
        <Param val="rgb" valType="str" updates="constant" name="lineColorSpace"/>
        <Param val="0" valType="code" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="polygon_trial_clicked_right" valType="code" updates="None" name="name"/>
        <Param val="0" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(CLICKED_OFFSET, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="rectangle" valType="str" updates="constant" name="shape"/>
        <Param val="(CLICKED_SIZE, CLICKED_SIZE)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="5.4" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="polygon_trial_clicked_left">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="fillColor"/>
        <Param val="rgb" valType="str" updates="constant" name="fillColorSpace"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="lineColor"/>
        <Param val="rgb" valType="str" updates="constant" name="lineColorSpace"/>
        <Param val="0" valType="code" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="polygon_trial_clicked_left" valType="code" updates="None" name="name"/>
        <Param val="0" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(-CLICKED_OFFSET, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="rectangle" valType="str" updates="constant" name="shape"/>
        <Param val="(CLICKED_SIZE, CLICKED_SIZE)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="5.4" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
    </Routine>
    <Routine name="wait_for_mr_signal">
      <KeyboardComponent name="trigger_listener">
        <Param val="MR_TRIGGERKEY_TUPLE" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="trigger_listener" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="end_screen">
      <TextComponent name="end_text">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="LARGE_TXTSIZE" valType="code" updates="constant" name="letterHeight"/>
        <Param val="end_text" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="3" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="The experiment is now finished. Thank you!" valType="str" updates="constant" name="text"/>
        <Param val="deg" valType="str" updates="None" name="units"/>
        <Param val="26" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="instructions_part_one">
      <TextComponent name="text_instructions_part_one">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="MID_TXTSIZE" valType="code" updates="constant" name="letterHeight"/>
        <Param val="text_instructions_part_one" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="You will see images that change over time.&amp;#10;&amp;#10;Throughout the experiment, you will see a white dot in the center of the screen. Keep your eyes on it.&amp;#10;&amp;#10;In some pictures, but not all, there is a pattern.&amp;#10;&amp;#10;Press the left button to see an example of when there is a pattern." valType="str" updates="constant" name="text"/>
        <Param val="deg" valType="str" updates="None" name="units"/>
        <Param val="26" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_instructions_part_one">
        <Param val="LEFTKEY_TUPLE" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_instructions_part_one" valType="code" updates="None" name="name"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="4.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="code_constants">
        <Param val="### SET EXPERIMENT CONSTANTS ###&amp;#10;# trial image width/height size (in deg)&amp;#10;IMAGE_SIZE = 12&amp;#10;#trial 'click indicator' polygons' vertical offset&amp;#10;CLICKED_OFFSET = 9&amp;#10;#trial 'click indicator' polygons' size&amp;#10;CLICKED_SIZE = 0.5&amp;#10;&amp;#10;# instruction screen example image size&amp;#10;IMAGE_SIZE_INST = 10&amp;#10;&amp;#10;# instruction screen example image vertical offset&amp;#10;IMG_INST_V_OFFSET = 1&amp;#10;&amp;#10;# instruction screen text vertical offset&amp;#10;TXT_INST_V_OFFSET = -5&amp;#10;&amp;#10;# medium text size&amp;#10;MID_TXTSIZE = 0.6&amp;#10;LARGE_TXTSIZE = 1&amp;#10;&amp;#10;# demonstration found/not found messages&amp;#10;NOTFOUND_TXT = 'Formen fanns här. Tryck höger knapp.'&amp;#10;FOUND_TXT = 'Precis, formen fanns här. Tryck höger knapp.'&amp;#10;&amp;#10;# keyboard keys (or response button signals, if they are&amp;#10;# converted to keyboard presses) that are to be interpreted&amp;#10;# as left/right responses&amp;#10;LEFT_KEY = '3'&amp;#10;RIGHT_KEY = '1'&amp;#10;# it's not allowed to enter non-tuple/list variables in&amp;#10;# keyboard response components' 'allowed keys' fields,&amp;#10;# so also specify tuples to use&amp;#10;RESPONSE_KEYS = (LEFT_KEY, RIGHT_KEY)&amp;#10;LEFTKEY_TUPLE = (LEFT_KEY,)&amp;#10;RIGHTKEY_TUPLE = (RIGHT_KEY,)&amp;#10;&amp;#10;# 'keyboard key' that MR trigger signal is&amp;#10;# converted into ('5' is commonly used)&amp;#10;MR_TRIGGERKEY_TUPLE = ('5',)&amp;#10;&amp;#10;# trial image presentation durations&amp;#10;# Sapey/Boets:&quot;The Gabor patterns dynamically evolved from a random&amp;#10;# orientation to a final orientation, within 5400 ms&amp;#10;# (following 12 logarithmic steps, including eleven 355 ms&amp;#10;# frames and one 1495 ms end frame).&quot;&amp;#10;# specify end time of each image except the last one in the sets&amp;#10;# (last image is shown for a longer time than the others)&amp;#10;SHORT_DUR = 0.355&amp;#10;LONG_DUR = 1.495&amp;#10;&amp;#10;### END SET EXPERIMENT CONSTANTS ###" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_constants" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="instructions_part_two">
      <TextComponent name="text_instructions_part_two">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="MID_TXTSIZE" valType="code" updates="constant" name="letterHeight"/>
        <Param val="text_instructions_part_two" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Some of the images you see will have patterns, as in the first example.&amp;#10;&amp;#10;As soon as you see a pattern during the experiment, press the left button.&amp;#10;&amp;#10;When you have pressed the button, two small white boxes are shown.&amp;#10;&amp;#10;The experiment takes about ten minutes. A message will appear when you are done." valType="str" updates="constant" name="text"/>
        <Param val="deg" valType="str" updates="None" name="units"/>
        <Param val="26" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_instructions_part_two">
        <Param val="LEFTKEY_TUPLE" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_instructions_part_two" valType="code" updates="None" name="name"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="4.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="jittered_blank">
      <ImageComponent name="blank_image">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="stimuli/grey/grey_1_1.bmp" valType="str" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="None" valType="str" updates="constant" name="mask"/>
        <Param val="blank_image" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(IMAGE_SIZE, IMAGE_SIZE)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="9999" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="512" valType="code" updates="constant" name="texture resolution"/>
        <Param val="deg" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <CodeComponent name="blank_code">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="# import 'choice' function, needed for the custom 'generate_intervals' function&amp;#10;from random import choice &amp;#10;&amp;#10;def generate_intervals(total_time, step_size, min_interval, max_interval):&amp;#10;    &quot;&quot;&quot;&amp;#10;    generates a list of intervals in seconds&amp;#10;    &quot;&quot;&quot;&amp;#10;    if max_interval &gt; total_time or min_interval &gt; total_time:&amp;#10;        raise ValueError(&quot;max/min interval time must be lower than total time&quot;)&amp;#10;    if max_interval &lt; 0 or min_interval &lt; 0 or step_size &lt; 0:&amp;#10;        raise ValueError(&quot;passed values must not be negative&quot;)&amp;#10;    if max_interval &lt; min_interval:&amp;#10;        raise ValueError(&quot;min interval must be less than max interval&quot;)&amp;#10;    if min_interval%step_size != 0 or max_interval%step_size != 0:&amp;#10;        raise ValueError(&quot;max/min interval time must both be \&amp;#10;        multiples of step_size&quot;)&amp;#10;    num_steps = round((max_interval - min_interval) / step_size) + 1&amp;#10;    possible_intervals = np.linspace(min_interval, max_interval, num_steps)&amp;#10;    return_intervals = []&amp;#10;    aggregated_time = 0&amp;#10;    num_addition_attempts = 0&amp;#10;    num_runs = 0&amp;#10;    while aggregated_time != total_time:&amp;#10;        num_addition_attempts += 1&amp;#10;        if num_addition_attempts &gt; 200:&amp;#10;            aggregated_time = 0&amp;#10;            return_intervals = []&amp;#10;            num_addition_attempts = 0&amp;#10;            num_runs += 1&amp;#10;            if num_runs &gt; 100:&amp;#10;                raise ValueError(&quot;unable to find a sequence that fulfills the constraints, please change them&quot;)&amp;#10;        ok_candidate = False&amp;#10;        new_time_candidate = choice(possible_intervals)&amp;#10;        possible_new_aggr_time = new_time_candidate + aggregated_time&amp;#10;        if possible_new_aggr_time &gt; total_time:&amp;#10;            continue&amp;#10;        if possible_new_aggr_time == total_time:&amp;#10;            return_intervals.append(new_time_candidate)&amp;#10;            return return_intervals&amp;#10;        for interval in possible_intervals:&amp;#10;            if (possible_new_aggr_time + interval) &lt; total_time:&amp;#10;                ok_candidate = True&amp;#10;        if ok_candidate:&amp;#10;            aggregated_time += new_time_candidate&amp;#10;            return_intervals.append(new_time_candidate)&amp;#10;&amp;#10;# get the sum total inter-trial interval duration by taking &amp;#10;# the number of trials and multiplying by 0.6 (average duration&amp;#10;# is to be 0.6s).&amp;#10;# generate random set of intervals of lengths 0.5s, 0.6s or 0.7s, &amp;#10;# that add up to the calculated sum total duration, for jitter.&amp;#10;# (first multiplying each of the involved numbers by 10, &amp;#10;# because integers must be used first when generating&amp;#10;# durations sequence,since floats lead to issues with &amp;#10;# comparison operators)&amp;#10;sum_total_dur = len(all_filepath_roots) * 0.6&amp;#10;interval_durs = generate_intervals(total_time=int(sum_total_dur*10),&amp;#10;                               step_size=1,&amp;#10;                               min_interval=5,&amp;#10;                               max_interval=7)&amp;#10;# dividing each interval duration by 10 now that generation is done&amp;#10;interval_durs = [interval_dur/10 for interval_dur in interval_durs]&amp;#10;&amp;#10;# initialize counter for stepping through interval durations&amp;#10;interval_counter = 0&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="import {choice} from 'random';&amp;#10;var interval_counter, interval_durs, sum_total_dur;&amp;#10;function generate_intervals(total_time, step_size, min_interval, max_interval) {&amp;#10;    /*&amp;#10;    generates a list of intervals in seconds&amp;#10;    */&amp;#10;    var aggregated_time, new_time_candidate, num_addition_attempts, num_runs, num_steps, ok_candidate, possible_intervals, possible_new_aggr_time, return_intervals;&amp;#10;    if (((max_interval &gt; total_time) || (min_interval &gt; total_time))) {&amp;#10;        throw new ValueError(&quot;max/min interval time must be lower than total time&quot;);&amp;#10;    }&amp;#10;    if ((((max_interval &lt; 0) || (min_interval &lt; 0)) || (step_size &lt; 0))) {&amp;#10;        throw new ValueError(&quot;passed values must not be negative&quot;);&amp;#10;    }&amp;#10;    if ((max_interval &lt; min_interval)) {&amp;#10;        throw new ValueError(&quot;min interval must be less than max interval&quot;);&amp;#10;    }&amp;#10;    if ((((min_interval % step_size) !== 0) || ((max_interval % step_size) !== 0))) {&amp;#10;        throw new ValueError(&quot;max/min interval time must both be         multiples of step_size&quot;);&amp;#10;    }&amp;#10;    num_steps = (round(((max_interval - min_interval) / step_size)) + 1);&amp;#10;    possible_intervals = np.linspace(min_interval, max_interval, num_steps);&amp;#10;    return_intervals = [];&amp;#10;    aggregated_time = 0;&amp;#10;    num_addition_attempts = 0;&amp;#10;    num_runs = 0;&amp;#10;    while ((aggregated_time !== total_time)) {&amp;#10;        num_addition_attempts += 1;&amp;#10;        if ((num_addition_attempts &gt; 200)) {&amp;#10;            aggregated_time = 0;&amp;#10;            return_intervals = [];&amp;#10;            num_addition_attempts = 0;&amp;#10;            num_runs += 1;&amp;#10;            if ((num_runs &gt; 100)) {&amp;#10;                throw new ValueError(&quot;unable to find a sequence that fulfills the constraints, please change them&quot;);&amp;#10;            }&amp;#10;        }&amp;#10;        ok_candidate = false;&amp;#10;        new_time_candidate = choice(possible_intervals);&amp;#10;        possible_new_aggr_time = (new_time_candidate + aggregated_time);&amp;#10;        if ((possible_new_aggr_time &gt; total_time)) {&amp;#10;            continue;&amp;#10;        }&amp;#10;        if ((possible_new_aggr_time === total_time)) {&amp;#10;            return_intervals.append(new_time_candidate);&amp;#10;            return return_intervals;&amp;#10;        }&amp;#10;        for (var interval, _pj_c = 0, _pj_a = possible_intervals, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;            interval = _pj_a[_pj_c];&amp;#10;            if (((possible_new_aggr_time + interval) &lt; total_time)) {&amp;#10;                ok_candidate = true;&amp;#10;            }&amp;#10;        }&amp;#10;        if (ok_candidate) {&amp;#10;            aggregated_time += new_time_candidate;&amp;#10;            return_intervals.append(new_time_candidate);&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;sum_total_dur = (all_filepath_roots.length * 0.6);&amp;#10;interval_durs = generate_intervals({&quot;total_time&quot;: Number.parseInt((sum_total_dur * 10)), &quot;step_size&quot;: 1, &quot;min_interval&quot;: 5, &quot;max_interval&quot;: 7});&amp;#10;interval_durs = function () {&amp;#10;    var _pj_a = [], _pj_b = interval_durs;&amp;#10;    for (var _pj_c = 0, _pj_d = _pj_b.length; (_pj_c &lt; _pj_d); _pj_c += 1) {&amp;#10;        var interval_dur = _pj_b[_pj_c];&amp;#10;        _pj_a.push((interval_dur / 10));&amp;#10;    }&amp;#10;    return _pj_a;&amp;#10;}&amp;#10;.call(this);&amp;#10;interval_counter = 0;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="interval_dur = interval_durs[interval_counter];&amp;#10;routineTimer.add(((- 9999.0) + interval_dur));&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# get this trial's interval duration&amp;#10;interval_dur = interval_durs[interval_counter]&amp;#10;# the image component's duration is set to 9999,&amp;#10;# to achieve non-slip timing. to counteract the &amp;#10;# time added to the routine timer, subtract 9999.&amp;#10;# then add the actual routine duration.&amp;#10;# (more information at &amp;#10;# https://discourse.psychopy.org/t/confusion-&amp;#10;# about-how-to-implement-non-slip-timing-&amp;#10;# for-trials-with-known-end-points/4479/8)&amp;#10;routineTimer.add(-9999.000000 + interval_dur)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="if tThisFlip &gt;= interval_dur:&amp;#10;    continueRoutine = False" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="# increment interval counter by 1 to proceed to next interval duration&amp;#10;# for next routine iteration&amp;#10;interval_counter += 1" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="blank_code" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="post_trial_question">
      <TextComponent name="post_trial_q_text">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="2" valType="code" updates="constant" name="letterHeight"/>
        <Param val="post_trial_q_text" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 5)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="9999" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Såg du ett djur i bilden?" valType="str" updates="constant" name="text"/>
        <Param val="deg" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="post_trial_yes_text">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="2" valType="code" updates="constant" name="letterHeight"/>
        <Param val="post_trial_yes_text" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(5, -5)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="9999" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Ja&amp;#10;(höger)" valType="str" updates="constant" name="text"/>
        <Param val="deg" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="post_trial_no_text">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="2" valType="code" updates="constant" name="letterHeight"/>
        <Param val="post_trial_no_text" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(-5, -5)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="9999" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Nej&amp;#10;(vänster)" valType="str" updates="constant" name="text"/>
        <Param val="deg" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="post_trial_key_resp">
        <Param val="'left','right'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="post_trial_key_resp" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="9999" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="post_trial_code">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="# import function for randomly determining when to pose post-trial&amp;#10;# question&amp;#10;from random import shuffle&amp;#10;&amp;#10;# generate list of boolean values which specify if a post-trial&amp;#10;# question should be posed (&quot;Was there an animal in the picture?&quot;)&amp;#10;post_trial_bools = [False] * 72 + [True] * 8&amp;#10;shuffle(post_trial_bools)&amp;#10;# initialize counter for going through post_trial_bools values&amp;#10;post_trial_counter = 0" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="import {shuffle} from 'random';&amp;#10;var post_trial_bools, post_trial_counter;&amp;#10;post_trial_bools = (([false] * 72) + ([true] * 8));&amp;#10;shuffle(post_trial_bools);&amp;#10;post_trial_counter = 0;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="post_trial_bool = post_trial_bools[post_trial_counter];&amp;#10;if ((! post_trial_bool)) {&amp;#10;    continueRoutine = false;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# check if post-trial question should be posed, and otherwise&amp;#10;# skip it&amp;#10;post_trial_bool = post_trial_bools[post_trial_counter]&amp;#10;if not post_trial_bool:&amp;#10;    continueRoutine = False&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="post_trial_counter += 1;&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="post_trial_counter += 1" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="post_trial_code" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="stimulus_demonstration_pattern">
      <CodeComponent name="code_demo_pattern">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="### check for explanations in trial code snippet&amp;#10;# initialize counter for stepping through each set's images &amp;#10;# the filenames go from &quot;foobar_1.bmp&quot; up to &quot;foobar_12.bmp&quot;&amp;#10;set_img_counter = 1&amp;#10;&amp;#10;# set the filepath root for the set of images to use during&amp;#10;# the demonstration&amp;#10;demo_root = os.path.join(os.getcwd(), &quot;stimuli&quot;, &quot;Gabor stimuli Sapey Boets&quot;, &quot;RFP_OPP&quot;, &quot;RFP_OPP_1_&quot;)&amp;#10;&amp;#10;# set first image to be drawn at beginning of routine&amp;#10;image_stimulus.image = demo_root + str(set_img_counter) + &quot;.bmp&quot;&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="### check for explanations in trial code snippet&amp;#10;# check if time for when last image should stop has passed&amp;#10;if tThisFlip &gt; SHORT_DUR*11+LONG_DUR:&amp;#10;    continueRoutine = False&amp;#10;# check if the time for when previous image should stop has passed&amp;#10;if tThisFlip &gt; img_duration_ls[set_img_counter - 1]:&amp;#10;    image_stimulus.image = demo_root + str(set_img_counter) + &quot;.bmp&quot;&amp;#10;    set_img_counter += 1&amp;#10;image_stimulus.draw()" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="image_stimulus.autoDraw = False" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_demo_pattern" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="text_demo_pattern">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.1" valType="code" updates="constant" name="letterHeight"/>
        <Param val="text_demo_pattern" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="stimulus_demonstration_random">
      <CodeComponent name="code_demo_random">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="### check for explanations in trial code snippet&amp;#10;# initialize counter for stepping through each set's images &amp;#10;# the filenames go from &quot;foobar_1.bmp&quot; up to &quot;foobar_12.bmp&quot;&amp;#10;set_img_counter = 1&amp;#10;&amp;#10;# set the filepath root for the set of images to use during&amp;#10;# the demonstration&amp;#10;demo_root = os.path.join(os.getcwd(), &quot;stimuli&quot;, &quot;Gabor stimuli Sapey Boets&quot;, &quot;RFP_RRR&quot;, &quot;RFP_RRR_1_&quot;)&amp;#10;&amp;#10;# set first image to be drawn at beginning of routine&amp;#10;image_stimulus.image = demo_root + str(set_img_counter) + &quot;.bmp&quot;&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="### check for explanations in trial code snippet&amp;#10;# check if time for when last image should stop has passed&amp;#10;if tThisFlip &gt; SHORT_DUR*11+LONG_DUR:&amp;#10;    continueRoutine = False&amp;#10;# check if the time for when previous image should stop has passed&amp;#10;if tThisFlip &gt; img_duration_ls[set_img_counter - 1]:&amp;#10;    image_stimulus.image = demo_root + str(set_img_counter) + &quot;.bmp&quot;&amp;#10;    set_img_counter += 1&amp;#10;image_stimulus.draw()" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="image_stimulus.autoDraw = False" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_demo_random" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="text_demo_random">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.1" valType="code" updates="constant" name="letterHeight"/>
        <Param val="text_demo_random" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="instructions_inter_demo">
      <TextComponent name="text_instructions_inter_demo">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="MID_TXTSIZE" valType="code" updates="constant" name="letterHeight"/>
        <Param val="text_instructions_inter_demo" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, TXT_INST_V_OFFSET)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Did you see the pattern?&amp;#10;&amp;#10;Press the left button to see an example of when there is no pattern." valType="str" updates="constant" name="text"/>
        <Param val="deg" valType="str" updates="None" name="units"/>
        <Param val="26" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_instructions_inter_demo">
        <Param val="LEFTKEY_TUPLE" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_instructions_inter_demo" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="2.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <ImageComponent name="img_inter_demo">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="stimuli/demo_img/RFP_OPP_1_12_highlighted.bmp" valType="str" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="None" valType="str" updates="constant" name="mask"/>
        <Param val="img_inter_demo" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, IMG_INST_V_OFFSET)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(IMAGE_SIZE_INST, IMAGE_SIZE_INST)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="512" valType="code" updates="constant" name="texture resolution"/>
        <Param val="deg" valType="str" updates="None" name="units"/>
      </ImageComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="instructions_part_one"/>
    <Routine name="stimulus_demonstration_pattern"/>
    <Routine name="instructions_inter_demo"/>
    <Routine name="stimulus_demonstration_random"/>
    <Routine name="instructions_part_two"/>
    <Routine name="wait_for_mr_signal"/>
    <LoopInitiator loopType="TrialHandler" name="trials_gabor">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="len(all_filepath_roots)" valType="code"/>
      <Param name="name" updates="None" val="trials_gabor" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="trial_gabor"/>
    <Routine name="jittered_blank"/>
    <LoopTerminator name="trials_gabor"/>
    <Routine name="end_screen"/>
  </Flow>
</PsychoPy2experiment>
